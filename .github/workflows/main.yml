name: ShellCheck

env:
  TERM: screen-256color

on:
  pull_request:
    branches: ["master", "main"]
    paths-ignore: ["docs/**"]

  push:
    branches: ["master", "main"]
    paths-ignore: ["docs/**"]
    tags:
      - "v*"

jobs:

  # Runs all steps on the VM
  test:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04, ubuntu-18.04]

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v2
        # Use https (public access) instead of git for git-submodules.
        with:
          submodules: true

      # - name: Setup Submodules
      #   run: |
      #     # use sed to replace the SSH URL with the public URL, then init and update submodules
      #     sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules
      #     git submodule update --init --recursive

      - name: Run tests
        shell: bash
        run: |
          echo "${{ github.ref }}"
          bash -c 'shopt -s globstar; shellcheck ./*.sh; shellcheck ./tests/*.sh'
          bash tests/unit-tests.sh -s

  # Runs all steps on the VM
  # Creates a GitHub Release when the test job succeeds, and only on pushes to tags.
  release:

    needs: test

    if: needs.test.result == 'success' && startsWith( github.ref, 'refs/tags/v' )

    runs-on: ubuntu-20.04

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        # Use https (public access) instead of git for git-submodules.
        with:
          submodules: false

      - name: Setup Submodules
        run: |
          # use sed to replace the SSH URL with the public URL, then init and update submodules
          sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules
          git submodule update --init --recursive

      - name: Get the version
        id: get_version
        run: |
          echo "${{ github.ref }}"
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Generate Release Title
        id: get_release_title
        shell: bash
        run: |
          export TODAY="($(TZ=Africa/Lusaka date --iso))"
          echo ::set-output name=RELEASE_NAME::"${{ steps.get_version.outputs.VERSION }} $TODAY"

      - name: Extract Release Notes
        # This creates a file LATEST_RELEASE_NOTES.md in the parent directory (../)
        shell: bash
        run: |
          python3 -m pip install -r misc/requirements-dev.txt
          python3 misc/release.py notes

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_release_title.outputs.RELEASE_NAME }}
          body_path: ../LATEST_RELEASE_NOTES.md
